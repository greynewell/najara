openapi: 3.0.1
info:
  title: Najara.py
  description: 'Najara is a serverless Python/Flask based REST API for managing a collection of DND 5e items on AWS.'
  contact:
    email: greyshipscode@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about the author
  url: https://github.com/greynewell
tags:
- name: collection
  description: Create & list collections of items.
- name: item
  description: Perform operations on items in a collection.
  externalDocs:
    description: Find out more
    url: https://www.dndbeyond.com/magic-items
security:
  - BearerAuth: []
paths:
  /collection:
    post:
      tags:
      - collection
      summary: Creates a collection.
      description: Generates a collection for storing items in Najara.
      operationId: createCollection
      requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
            application/xml:
              schema:
                $ref: '#/components/schemas/Collection'
      responses:
        200:
          description: Success response- the list of all item collections in Najara!
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/CreateSuccess'
            application/xml:
              schema:
                $ref: '#/components/schemas/CreateSuccess'
    get:
      tags:
      - collection
      summary: Returns a list of collections.
      description: Fetch all item collections stored in this instance of Najara.
      operationId: listCollection
      responses:
        200:
          description: Success response- the list of all item collections in Najara!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionList'
            application/xml:
              schema:
                $ref: '#/components/schemas/CollectionList'
  /item/{collectionGuid}/{itemId}:
    post:
        tags:
        - item
        summary: Create an item in the collection with the given id.
        description: Provide the necessary properties of the item, a valid unused item id and a valid GUID id belonging to a collection.
        operationId: createItem
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
            application/xml:
              schema:
                $ref: '#/components/schemas/Item'
        parameters:
          - $ref: '#/components/parameters/CollectionGUID'
          - $ref: '#/components/parameters/ItemID'
        responses:
          200:
            description: Success response- your collection has been created!
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CreateSuccess'
              application/xml:
                schema:
                  $ref: '#/components/schemas/CreateSuccess'
          404:
            description: No collection found for given id.
    get:
      tags:
      - item
      summary: Return items belonging to a collection.
      description: Fetch items from 
      operationId: readItem
      parameters:
          - $ref: '#/components/parameters/CollectionGUID'
          - $ref: '#/components/parameters/ItemID'
      responses:
        200:
          description: Success response- the items of your requested collection!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
            application/xml:
              schema:
                $ref: '#/components/schemas/Item'
        404:
          description: No collection found for the requested id.
    put:
        tags:
        - item
        summary: Add an item to a collection.
        description: Provide the properties of the new item and a valid collection GUID.
        operationId: updateItem
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
            application/xml:
              schema:
                $ref: '#/components/schemas/Item'
        parameters:
          - $ref: '#/components/parameters/CollectionGUID'
          - $ref: '#/components/parameters/ItemID'
        responses:
          200:
            description: Success response- your item has been added to the collection!
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UpdateSuccess'
              application/xml:
                schema:
                  $ref: '#/components/schemas/UpdateSuccess'
          404:
            description: No collection found for the requested id.
    delete:
      tags:
      - item
      summary: Delete an item from a collection.
      description: Delete an item from a Najara collection using its id.
      operationId: deleteCollectionItem
      parameters:
          - $ref: '#/components/parameters/CollectionGUID'
          - $ref: '#/components/parameters/ItemID'
      responses:
        200:
          description: Success response- your item has been deleted!
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/DeleteSuccess'
            application/xml:
              schema:
                $ref: '#/components/schemas/DeleteSuccess'
        404:
          description: Item not found. No Item could be found for the requested id.
components:
  securitySchemes:
      BearerAuth:
        type: http
        scheme: bearer
  parameters:
    CollectionGUID:
      name: collectionGuid
      in: path
      description: GUID id of the desired collection.
      required: true
      schema:
        example: 'd66e22c7-95d2-49d2-95a2-77220a444411'
        type: string
        format: GUID
    ItemID:
      name: itemId
      in: path
      description: Integer id of an item inside a collection.
      required: true
      schema:
        example: 135
        type: integer
        format: int64
        default: \*
  schemas:
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 135
        name:
          type: string
          example: Arrows
        type:
          type: string
          example: Ammunition
        quantity:
          type: integer
          format: int64
          example: 1
        weight:
          minimum: 0
          type: number
          format: number
          example: 0.05
        gpvalue:
          minimum: 0
          type: number
          format: number
          example: 0.05
        description:
          type: string
          example: "A regular wooden arrow."
      xml:
        name: Item
    Collection:
      type: object
      properties:
        id:
          type: string
          format: GUID
          example: d66e22c7-95d2-49d2-95a2-77220a444411
        name:
          type: string
          example: Nischal's Items
        description:
          type: string
          example: Items carried by gnome monk Nischal in Waterdeep.
      xml:
        name: Collection
    CollectionList:
      type: object
      properties:
        collections:
          type: array
          items:
             $ref: '#/components/schemas/Collection'
      xml:
        name: CollectionList
    ActionResult:
      type: object
      properties:
        status:
          type: string
          example: 'ACTION-STATUS: some-guid-of-requested-item'
      xml:
        name: ActionResult
    CreateSuccess:
      allOf:
        - $ref: '#/components/schemas/ActionResult'
        - type: object
          properties:
            status:
              type: string
              example: 'CREATE-SUCCESS'
            collection:
              type: string
              example: 'd66e22c7-95d2-49d2-95a2-77220a444411'
    UpdateSuccess:
      allOf:
        - $ref: '#/components/schemas/ActionResult'
        - type: object
          properties:
            status:
              type: string
              example: 'UPDATE-SUCCESS: d66e22c7-95d2-49d2-95a2-77220a444411'
    DeleteSuccess:
      allOf:
        - $ref: '#/components/schemas/ActionResult'
        - type: object
          properties:
            status:
              type: string
              example: 'DELETE-SUCCESS: d66e22c7-95d2-49d2-95a2-77220a444411'