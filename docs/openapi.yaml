openapi: 3.0.1
info:
  title: Najara.py
  description: 'Najara is a serverless Python/Flask based REST API for managing collections of DND 5e items on AWS.'
  contact:
    email: greyshipscode@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
externalDocs:
  description: Find out more about the author
  url: https://github.com/greynewell
tags:
- name: collection
  description: Manage collections of items.
- name: item
  description: Manage items in a collection.
security:
  - BearerAuth: []
paths:
  /:
    get:
      tags:
      - collection
      summary: List all collections.
      description: Returns an array of all collections contained in Najara.
      operationId: readCollections
      responses:
        200:
          $ref: '#/components/responses/readCollections'
  /collection:
    post:
      tags:
      - collection
      summary: Create an empty collection.
      description: Creates a collection for storing items in Najara. Returns an action result.
      operationId: createCollection
      requestBody:
        $ref: '#/components/requestBodies/Collection'
      responses:
        200:
          $ref: '#/components/responses/createCollectionSuccess'
  /collection/{collectionGuid}:
    get:
      tags:
      - collection
      summary: Return a collection's metadata and items.
      description: Returns a collection and the list of items contained by the collection.
      operationId: readCollection
      parameters: 
      - $ref: '#/components/parameters/CollectionGUID'
      responses:
        200:
          $ref: '#/components/responses/readCollection'
        404:
            description: No collection found for given id.
    patch:
      tags:
      - collection
      summary: Update a collection's metadata.
      description: Modifies a collection with the fields passed in. Returns an action result.
      operationId: updateCollection
      parameters: 
      - $ref: '#/components/parameters/CollectionGUID'
      requestBody:
        $ref: '#/components/requestBodies/Collection'
      responses:
        200:
          $ref: '#/components/responses/updateCollectionSuccess'
        404:
            description: No collection found for given id.
  /item/{collectionGuid}:
      post:
        tags:
        - item
        summary: Create an item in a collection.
        description: Provide the necessary properties of the item and a valid GUID belonging to a collection.
        operationId: createItem
        requestBody:
          $ref: '#/components/requestBodies/Item'
        parameters:
          - $ref: '#/components/parameters/CollectionGUID'
        responses:
          200:
            $ref: '#/components/responses/createItemSuccess'
          404:
            description: No collection found for given id.
  /item/{collectionGuid}/{itemId}:
    get:
      tags:
      - item
      summary: Return an item from a collection.
      description: Provide a valid collection GUID and integer item id to retrieve the properties of that item.
      operationId: readItem
      parameters:
          - $ref: '#/components/parameters/CollectionGUID'
          - $ref: '#/components/parameters/ItemID'
      responses:
        200:
          description: Success response- the item from the specified collection!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        404:
          description: No collection found for the requested id.
    put:
        tags:
        - item
        summary: Update an item in a collection.
        description: Provide a valid collection GUID, the integer itemId, and the new properties of the item.
        operationId: updateItem
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        parameters:
          - $ref: '#/components/parameters/CollectionGUID'
          - $ref: '#/components/parameters/ItemID'
        responses:
          200:
            $ref: '#/components/responses/updateItemSuccess'
          404:
            description: No collection found for the requested id.
    delete:
      tags:
      - item
      summary: Delete an item from a collection.
      description: Provide a valid collection GUID and the integer itemID to delete the item from its collection.
      operationId: deleteCollectionItem
      parameters:
          - $ref: '#/components/parameters/CollectionGUID'
          - $ref: '#/components/parameters/ItemID'
      responses:
        200:
          $ref: '#/components/responses/deleteItemSuccess'
        404:
          description: No collection found for the requested id.
components:
  securitySchemes:
      BearerAuth:
        type: http
        scheme: bearer
  parameters:
    CollectionGUID:
      name: collectionGuid
      in: path
      description: GUID id of the desired collection.
      required: true
      schema:
        example: 'd66e22c7-95d2-49d2-95a2-77220a444411'
        type: string
        format: GUID
    ItemID:
      name: itemId
      in: path
      description: Integer id of an item inside a collection.
      required: true
      schema:
        example: 135
        type: integer
        format: int64
  responses:
    createCollectionSuccess:
      description: Success response- createCollection has succeeded!
      content:
        application/json:
          schema:
           allOf:
            - $ref: '#/components/schemas/ActionResult'
            - type: object
              properties:
                action:
                  type: string
                  example: 'CREATE'
                target:
                  type: string
                  example: 'COLLECTION'
                result-id:
                  type: string
                  example: 'd66e22c7-95d2-49d2-95a2-77220a444411'
    createItemSuccess:
      description: Success response- createItem has succeeded!
      content:
        application/json:
          schema:
           allOf:
            - $ref: '#/components/schemas/ActionResult'
            - type: object
              properties:
                action:
                  type: string
                  example: 'CREATE'
                result-id:
                  type: integer
                  example: 135
    readCollections:
      description: Success response- the list of all item collections in Najara!
      content:
        application/json:
          schema:
            type: object
            properties:
              collections:
                type: array
                items:
                   $ref: '#/components/schemas/Collection'
    readCollection:
      description: Success response- a collection and all its items!
      content:
        application/json:
          schema:
            type: object
            properties:
              collection:
                $ref: '#/components/schemas/Collection'
              items:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
    updateCollectionSuccess:
      description: Success response- your collection has been updated!
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ActionResult'
              - type: object
                properties:
                  action:
                    type: string
                    example: 'UPDATE'
                  target:
                    type: string
                    example: COLLECTION
                  result-id:
                    type: string
                    format: GUID
                    example: 'd66e22c7-95d2-49d2-95a2-77220a444411'
    updateItemSuccess:
      description: Success response- your item has been updated!
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ActionResult'
              - type: object
                properties:
                  action:
                    type: string
                    example: 'UPDATE'
                  result-id:
                    type: integer
                    example: 135
    deleteItemSuccess:
      description: Success response- your item has been deleted!
      content:
        application/json:
          schema:
           allOf:
            - $ref: '#/components/schemas/ActionResult'
            - type: object
              properties:
                action:
                  type: string
                  example: 'DELETE'
                result-id:
                  type: integer
                  example: 135
  requestBodies:
    Collection:
      content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: Nischal's Items
                  description:
                    type: string
                    example: Items carried by gnome monk Nischal in Waterdeep.
    Item:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: Arrows
              type:
                type: string
                example: Ammunition
              quantity:
                type: integer
                format: int64
                example: 1
              weight:
                minimum: 0
                type: number
                format: number
                example: 0.05
              gpvalue:
                minimum: 0
                type: number
                format: number
                example: 0.05
              description:
                type: string
                example: "A regular wooden arrow."
  schemas:
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 135
        name:
          type: string
          example: Arrows
        type:
          type: string
          example: Ammunition
        quantity:
          type: integer
          format: int64
          example: 1
        weight:
          minimum: 0
          type: number
          format: number
          example: 0.05
        gpvalue:
          minimum: 0
          type: number
          format: number
          example: 0.05
        description:
          type: string
          example: "A regular wooden arrow."
      xml:
        name: Item
    Collection:
      type: object
      properties:
        id:
          type: string
          format: GUID
          example: d66e22c7-95d2-49d2-95a2-77220a444411
        name:
          type: string
          example: Nischal's Items
        description:
          type: string
          example: Items carried by gnome monk Nischal in Waterdeep.
      xml:
        name: Collection
    ActionResult:
      type: object
      properties:
        action:
          type: string
          example: 'ACTION'
        target:
          type: string
          example: 'ITEM'
        success:
          type: boolean
          example: true
        result-id:
          type: string
          format: id
      xml:
        name: ActionResult
      